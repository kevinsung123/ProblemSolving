#include<iostream>
#include<queue>
#include<vector>
using namespace std;

int N, M;
vector<vector<bool> >visited(101, vector<bool>(101,0));
vector<vector<int> >map(101, vector<int>(101));
void bfs(int x,int y);
int dx[] = { -1,1,0,0 };
int dy[] = { 0,0,1,-1 };

int main(void)
{
	ios::sync_with_stdio(false);

	
	scanf("%d %d", &N, &M);

	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			scanf("%1d", &map[i][j]);
	map[0][0] = 1; //처음이랑 마지막 지나는 경우수 +2
	


	bfs(0, 0);

	/*for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++)
			cout << map[i][j];
		cout << endl;
	}*/
	cout << map[N - 1][M - 1];

	return 0;
}


void bfs(int x, int y)
{
	queue<pair<int, int> >q;

	q.push(make_pair(x, y));

	while (!q.empty()) {
		x = q.front().first;
		y = q.front().second;

		q.pop();
		if (x == N - 1 && y == M - 1)
			break;
		for (int i = 0; i < 4; i++){
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx<0 || nx> N-1 || ny<0 || ny> M-1) 
				continue;
			
			if (map[nx][ny] == 1) {
				//visited[nx][ny] = true;
				q.push(make_pair(nx, ny));
				map[nx][ny] = map[x][y] + 1;
			}
		}
	}
}